{"version":3,"sources":["assets/images/1.jpg","components/Header/index.js","components/Filter/index.js","assets/images/index.js","components/Main/index.js","app.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","style","margin","role","type","Filter","backgroundColor","color","id","name","htmlFor","apple","Main","foodList","data","map","item","src","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,+B,y5BCyB5BC,G,YAtBA,SAACC,GAAD,OACX,4BAAQC,UAAU,SAASC,MAAO,CAACC,OAAQH,EAAMG,SAC7C,yBAAKF,UAAU,gBAAf,QAAmC,uCACnC,yBAAKG,KAAK,cACN,2BAAOC,KAAK,aAEZ,0BAAMJ,UAAU,sBAChB,0BAAMA,UAAU,sBAChB,0BAAMA,UAAU,sBAEhB,wBAAIA,UAAU,eACV,wBAAIA,UAAU,uBAAd,QACA,qCACA,oCACA,0CACA,qCACA,4CCVDK,G,YANA,SAACN,GAAD,OACP,0BAAMC,UAAU,SAASC,MAAO,CAACK,gBAAiBP,EAAMQ,QACpD,2BAAOH,KAAK,WAAWI,GAAIT,EAAMU,KAAMA,KAAMV,EAAMU,OADvD,IACgE,2BAAOC,QAASX,EAAMU,MAAOV,EAAMU,S,OCF5FE,E,OAAf,E,OC0CeC,EAvCF,WAsBT,OACI,0BAAMZ,UAAU,QACZ,yBAAKA,UAAU,iBAAf,UAEI,kBAAC,EAAD,CAAQS,KAAK,OAAOF,MAAM,YAC1B,kBAAC,EAAD,CAAQE,KAAK,aAAaF,MAAM,YAChC,kBAAC,EAAD,CAAQE,KAAK,QAAQF,MAAM,aAE/B,iCA3BGM,EAASC,KAAKC,IAAI,SAAAC,GACrB,OAAQ,yBAAKhB,UAAU,eACnB,yBAAKA,UAAU,eACX,yBAAKiB,IAAKN,KAEd,yBAAKX,UAAU,iBACX,yBAAKA,UAAU,kBACX,qCACA,0BAAMA,UAAU,+BAEpB,yBAAKA,UAAU,qBAAf,aAGA,yBAAKA,UAAU,cAAf,eCXLkB,EAPH,kBACJ,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.24ba65e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.cbd07d0a.jpg\";","import React from 'react';\nimport './style.scss';\n\nconst Header = (props) => (\n    <header className=\"header\" style={{margin: props.margin}}>\n        <div className=\"header__logo\">about<span>food</span></div>\n        <nav role=\"navigation\">\n            <input type=\"checkbox\" />\n\n            <span className=\"header__menu-line\" />\n            <span className=\"header__menu-line\" />\n            <span className=\"header__menu-line\" />\n\n            <ul className=\"header__nav\">\n                <li className=\"header__nav--active\">Home</li>\n                <li>About</li>\n                <li>Meat</li>\n                <li>Vegetables</li>\n                <li>Fruit</li>\n                <li>Contact</li>\n            </ul>\n        </nav>\n    </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport './style.scss';\n\nconst Filter = (props) => (\n        <span className=\"filter\" style={{backgroundColor: props.color}}>\n            <input type=\"checkbox\" id={props.name} name={props.name} /> <label htmlFor={props.name}>{props.name}</label>\n        </span>\n    );\n\nexport default Filter;\n","\nimport apple from './1.jpg';\n\nexport default apple;","import React from 'react';\nimport './style.scss';\nimport Filter from '../Filter';\nimport apple from '../../assets/images/index'\nimport foodList from '../../assets/food-data.json';\n\nconst Main = () => {\n\n    const renderCard = () => {\n        return foodList.data.map(item => {\n            return (<div className=\"main__cards\">\n                <div className=\"card__image\">\n                    <img src={apple} />\n                </div>\n                <div className=\"card__content\">\n                    <div className=\"card__headline\">\n                        <h2>Apple</h2>\n                        <span className=\"card__tag card__tag--meat\"/>\n                    </div>\n                    <div className=\"card__description\">\n                        Some text\n                    </div>\n                    <div className=\"card__more\">More</div>\n                </div>\n            </div>)\n        });\n    };\n\n    return (\n        <main className=\"main\">\n            <div className=\"main__filters\">\n                Filter:\n                <Filter name=\"Meat\" color=\"#e73c01\"/>\n                <Filter name=\"Vegetables\" color=\"#2b9030\"/>\n                <Filter name=\"Fruit\" color=\"#f39200\"/>\n            </div>\n            <section>\n                {\n                    renderCard()\n                }\n            </section>\n        </main>\n    );\n};\n\nexport default Main;\n","import React, { Fragment } from 'react';\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\n\nconst App = () => (\n        <Fragment>\n            <Header />\n            <Main />\n        </Fragment>\n    );\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}